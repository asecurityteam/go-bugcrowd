// Code generated by MockGen. DO NOT EDIT.
// Source: bounty.go

// Package bugcrowd is a generated GoMock package.
package bugcrowd

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBountyAPI is a mock of BountyAPI interface
type MockBountyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBountyAPIMockRecorder
}

// MockBountyAPIMockRecorder is the mock recorder for MockBountyAPI
type MockBountyAPIMockRecorder struct {
	mock *MockBountyAPI
}

// NewMockBountyAPI creates a new mock instance
func NewMockBountyAPI(ctrl *gomock.Controller) *MockBountyAPI {
	mock := &MockBountyAPI{ctrl: ctrl}
	mock.recorder = &MockBountyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBountyAPI) EXPECT() *MockBountyAPIMockRecorder {
	return m.recorder
}

// GetBounties mocks base method
func (m *MockBountyAPI) GetBounties(ctx context.Context, requestConfig *GetBountiesOptions) (*http.Response, *GetBountiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBounties", ctx, requestConfig)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*GetBountiesResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBounties indicates an expected call of GetBounties
func (mr *MockBountyAPIMockRecorder) GetBounties(ctx, requestConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBounties", reflect.TypeOf((*MockBountyAPI)(nil).GetBounties), ctx, requestConfig)
}

// RetrieveBounty mocks base method
func (m *MockBountyAPI) RetrieveBounty(ctx context.Context, uuid string) (*http.Response, *RetrieveBountyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveBounty", ctx, uuid)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(*RetrieveBountyResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveBounty indicates an expected call of RetrieveBounty
func (mr *MockBountyAPIMockRecorder) RetrieveBounty(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveBounty", reflect.TypeOf((*MockBountyAPI)(nil).RetrieveBounty), ctx, uuid)
}
